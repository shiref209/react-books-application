{"version":3,"sources":["BooksAPI.js","components/select.js","components/Book.js","components/BookShelf.js","components/Search.js","App.js","index.js"],"names":["api","token","localStorage","Math","random","toString","substr","headers","Accept","Authorization","getAll","fetch","concat","then","res","json","data","books","update","book","shelf","id","method","Object","objectSpread","Content-Type","body","JSON","stringify","search","query","Select","props","react_default","a","createElement","className","onChange","e","target","value","defaultValue","disabled","Book","style","width","height","backgroundImage","img","components_select","select","title","author","BookShelf","_this","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","handleShelfChange","change","bookId","changedBook","filter","state","_this2","shelfBooks","shelfHolder","map","key","components_Book","authors","imageLinks","thumbnail","Component","Search","inputChangeHandler","event","toLowerCase","trim","BooksAPI","error","setState","isError","catch","react_router_dom","to","onClick","type","placeholder","length","BooksApp","isChanged","react_router","exact","path","components_Search","components_BookShelf","React","ReactDOM","render","src_App","document","getElementById"],"mappings":"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","file":"static/js/main.1313be7b.chunk.js","sourcesContent":["\nconst api = \"https://reactnd-books-api.udacity.com\"\n\n\n// Generate a unique token for storing your bookshelf data on the backend server.\nlet token = localStorage.token\nif (!token)\n  token = localStorage.token = Math.random().toString(36).substr(-8)\n\nconst headers = {\n  'Accept': 'application/json',\n  'Authorization': token\n}\n\nexport const get = (bookId) =>\n  fetch(`${api}/books/${bookId}`, { headers })\n    .then(res => res.json())\n    .then(data => data.book)\n\nexport const getAll = () =>\n  fetch(`${api}/books`, { headers })\n    .then(res => res.json())\n    .then(data => data.books)\n\nexport const update = (book, shelf) =>\n  fetch(`${api}/books/${book.id}`, {\n    method: 'PUT',\n    headers: {\n      ...headers,\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify({ shelf })\n    \n  }).then(res => {\n    return res.json()\n  })\n\nexport const search = (query) =>\n  fetch(`${api}/search`, {\n    method: 'POST',\n    headers: {\n      ...headers,\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify({ query })\n  }).then(res => res.json())\n    .then(data => data.books)\n","import React from \"react\";\r\n\r\n// Adding select as a single component to be re-usable\r\n// Practicing functional component\r\nconst Select=(props)=>{\r\n    const handleChange=(e)=>{\r\n        props.onChange(e.target.value)\r\n    }\r\n    return( \r\n    <div className=\"book-shelf-changer\" onChange={handleChange}>\r\n        {/* Adding default value to select dynamically depending on user input */}\r\n        <select defaultValue={props.shelf?props.shelf:'none'}>\r\n            <option value=\"move\" disabled  >Move to...</option>\r\n            <option value=\"currentlyReading\">Currently Reading</option>\r\n            <option value=\"wantToRead\">Want to Read</option>\r\n            <option value=\"read\">Read</option>\r\n            <option value=\"none\">None</option>\r\n            \r\n        </select>\r\n    </div>\r\n    )\r\n}\r\nexport default Select;","import React from \"react\";\r\nimport Select from \"./select\";\r\n// Using functional component as practice in Book.js\r\n// Breaking every book in a single component to easier render the dom and keeping better performance\r\nconst Book =(props)=>{\r\n    const handleSelect=(select)=>{\r\n        props.onChange(select,props.id);\r\n    }\r\n    return (\r\n        <div className=\"book\" >\r\n            <div className=\"book-top\">\r\n            <div className=\"book-cover\" style={{ width: 128, height: 193, backgroundImage:`url(${props.img})`}}></div>\r\n            <Select\r\n                onChange={handleSelect}\r\n                shelf={props.shelf}/>\r\n            </div>\r\n            <div className=\"book-title\">{props.title}</div>\r\n            <div className=\"book-authors\">{props.author}</div>\r\n        </div>\r\n    )\r\n    }\r\nexport default Book;","import React, { Component } from \"react\";\r\nimport Book from \"./Book\";\r\n\r\nclass BookShelf extends Component{\r\n    constructor(props){\r\n        // Storing changed book in state for future added features\r\n        super(props);\r\n        this.state={\r\n            changedBook:'',\r\n            shelf:''\r\n        }\r\n    }\r\n    // Lifting state up\r\n    handleShelfChange=(change,bookId)=>{\r\n        let changedBook=this.props.books.filter((book)=>(bookId ===book.id))\r\n        this.props.onChange(change,changedBook);\r\n    }\r\n    render(){\r\n        // getting the books for each bookshelf depending on props\r\n        const shelfBooks=this.props.books.filter((book)=>book.shelf===this.props.shelfHolder)\r\n        return(   \r\n        <div className=\"bookshelf\">\r\n            <h2 className=\"bookshelf-title\">{this.props.title}</h2>\r\n            <div className=\"bookshelf-books\">\r\n            <ol className=\"books-grid\">\r\n            {shelfBooks.map((book)=>\r\n                (<li key={book.id}>\r\n                    <Book\r\n                    author={book.authors}\r\n                    title={book.title}\r\n                    img={book.imageLinks.thumbnail}\r\n                    onChange={this.handleShelfChange}\r\n                    id={book.id}\r\n                    shelf={book.shelf}\r\n                    />\r\n                    </li>\r\n                    ))}\r\n            </ol>\r\n            </div>\r\n    </div>)   \r\n    }\r\n}\r\nexport default BookShelf;","\r\nimport React, { Component } from \"react\";\r\nimport {Link} from \"react-router-dom\";\r\nimport * as BooksAPI from '../BooksAPI';\r\nimport Book from \"./Book\";\r\nclass Search extends Component{\r\n    constructor(props){\r\n        super(props);\r\n        this.state={\r\n            books:[],\r\n            isError:false\r\n        }\r\n    }\r\n    handleShelfChange=(change,bookId)=>{\r\n        let changedBook=this.state.books.filter((book)=>(bookId ===book.id))\r\n        this.props.onChange(change,changedBook);}\r\n\r\n    inputChangeHandler=(event)=>{\r\n        let value=event.target.value.toLowerCase().trim();\r\n        BooksAPI.search(value).then((data)=>\r\n        {\r\n          // Handling error from search using isError from state\r\n          if (data.error){\r\n            this.setState(()=>({isError:true}))\r\n          }\r\n          else{\r\n            this.setState(()=>({\r\n              books:data,\r\n              isError:false\r\n            }))\r\n          }\r\n          })\r\n        .catch(error=>{\r\n          this.setState(()=>({isError:true}))\r\n        })\r\n    }\r\n    render(){\r\n        return(\r\n            \r\n                <div className=\"search-books\">\r\n                  <div className=\"search-books-bar\">\r\n                      <Link to='/'>\r\n                        <button className=\"close-search\" onClick={this.props.onClick}>Close</button>\r\n                      </Link>\r\n                    <div className=\"search-books-input-wrapper\">\r\n                      {/*\r\n                        NOTES: The search from BooksAPI is limited to a particular set of search terms.\r\n                        You can find these search terms here:\r\n                        https://github.com/udacity/reactnd-project-myreads-starter/blob/master/SEARCH_TERMS.md\r\n      \r\n                        However, remember that the BooksAPI.search method DOES search by title or author. So, don't worry if\r\n                        you don't find a specific author or title. Every search is limited by search terms.\r\n                      */}\r\n                      <input type=\"text\"\r\n                      placeholder=\"Search by title or author\" \r\n                      onChange={this.inputChangeHandler}\r\n                      />\r\n                    </div>\r\n                  </div>\r\n                  {//Conditional rendering to check the search input and view error message when error\r\n\r\n                  <div className=\"search-books-results\">\r\n                  <ol className=\"books-grid\">\r\n                      { this.state.isError? (<span>Please enter a valid input</span>)\r\n                      : this.state.books.length>=1 && this.state.books.map((book)=>\r\n              (<li key={book.id}>\r\n                  <Book\r\n                  author={\r\n                     // conditionally assigning prop value according to prescence of\r\n                    book.authors?book.authors\r\n                    :''\r\n                  }\r\n                  title={book.title}\r\n                  img={\r\n                    // conditionally assigning prop value according to prescence of thumbnail\r\n                    book.imageLinks? book.imageLinks.thumbnail\r\n                    :'' \r\n                      }\r\n                  onChange={this.handleShelfChange}\r\n                  id={book.id}\r\n                  shelf={book.shelf}\r\n                  />\r\n                  </li>\r\n                  ))\r\n                  }\r\n                  </ol>\r\n                </div>\r\n                  }\r\n                </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Search;","import React from 'react';\nimport './App.css';\nimport * as BooksAPI from './BooksAPI';\nimport BookShelf from './components/BookShelf';\nimport { Link, Route, Switch } from 'react-router-dom';\nimport Search from './components/Search';\n\nclass BooksApp extends React.Component {\n    constructor(){\n      super();\n      this.state={\n        books:[],\n        isChanged:false\n      }\n    }\n    // function to left the state up till app.js to handle the changes\n    handleShelfChange=(change,changedBook)=>{\n      \n      // calling update() with the book having changed to update the backend and then recall the books again to update the state\n       BooksAPI.update(changedBook[0],change).then(BooksAPI.getAll().then(data=>{\n        this.setState(()=>({\n          books:data,\n          isChanged:false\n        }))    \n      }))\n      this.setState(()=>({isChanged:true}));\n    }\n    // calling componentDidMount to fetch books for first time app runs\n    componentDidMount(){\n      BooksAPI.getAll().then(data=>{\n        this.setState(()=>({\n          books:data\n        }))    \n      })\n    }\n  render() {\n    return (\n          <div className=\"app\">\n            <Switch>\n              <Route exact path='/search'>\n                  <Search onChange={this.handleShelfChange}/>\n                </Route>\n                <Route path='/'>\n                  <div className=\"list-books\">\n                    <div className=\"list-books-title\">\n                      <h1>MyReads</h1>\n                    </div>\n                  <div className=\"list-books-content\">\n                    <BookShelf\n                      books={this.state.books}\n                      onChange={this.handleShelfChange}\n                      title='Currently Reading'\n                      shelfHolder='currentlyReading' />\n                    <BookShelf\n                      books={this.state.books}\n                      onChange={this.handleShelfChange}\n                      title='To Read'\n                      shelfHolder='wantToRead' />\n                    <BookShelf\n                      books={this.state.books}\n                      onChange={this.handleShelfChange}\n                      title='Read'\n                      shelfHolder='read' />\n                </div>\n                {/* Adding link to React-Router to navigate to search page */}\n                <Link to='/search'>\n                  <div className=\"open-search\">\n                    <button >Add a book</button>\n                  </div>\n                </Link>\n              </div>\n              </Route>\n\n            </Switch>\n          </div>\n    )\n  }\n}\n\nexport default BooksApp;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport './index.css';\nimport { BrowserRouter as Router} from \"react-router-dom\";\n\nReactDOM.render(\n    <Router>\n        <App/>\n    </Router>\n\n \n\n,document.getElementById(\"root\"))\n"],"sourceRoot":""}